首先功能需求不等于需求分析。
需求分析是对用户提出的需求进行分析或是对表面的存在的需要进行分析以归纳出使用软件本质要求。

通过对用户需求的分析我们站在用户的角度，设想一种用户使用软件完成需求的场景。
这个场景就是“使用案例”或“使用方案”通过‘使用方案’我们可以和用户沟通让
用户验证我们提供‘使用方案’是否满足他们的需求。这些工作是需求分析，是清楚了解使用者的需求。
‘使用方案’的重要性在与：为软件功能总结提供了从抽象功能概念到集体功能使用的转化过程。
当需求分析完成后。我们站在软件设计的角度，根据‘使用方案’的具体使用过程总结出与此相对应的软件产品的具体功能需求。
有了明确的功能需求，就可以依照功能需求进行具体的功能设计。设计人员就可以围绕每个具体功能进行详细的功能设计。

例如：流体分析时用户需要对系统中的阀门设置不同关闭控制参数（还包括其它设计参数的调整）进行计算，
根据计算结果比较得出最好的设计方案。通过对这些抽象的需要分析我们设计工况管理的具体使用方法供客户验证我们是否真正理解他们的需要。在得到确认后我们总结出用户需要增加子工况，克隆兄弟工况，克隆兄弟工况及其子工况，提升工况，删除工况，重命名工况，以及提供用户查看各个工况信息的窗口等功能需求。
在接下来的功能设计中就需要掌握各种软件设计知识和设计思想。在设计工况功能首先必须做到，即要保持各个工况的管道系统模型之间属性共享的关系，又要使设计管道系统模型的人看不到工况的存在。
大概设计思路：首先个工况之间用递归组合结构。每个工况有唯一ID方面查找。子工况保存父节点指针使每个工况和其祖先工况之间形成职责链。设计一个工况对象基类和一个享元抽象基类。工况对象基类有两个Map保存
享元抽象基类指针。一个保存自身拥有的属性可以任意修改，一个在设置为当前工况时通过职责链向祖先工况发送消息查找得来的共享属性只保存一个指针。使用懒惰方法，当这些共享属性修改时才分配空间保存作为自身拥有的属性。当设计具体工况对象类时只需从工况对象基类继承，类的属性从享元抽象基类继承。然后用静态数组标记类具有的属性信息。工况对象基类使用模板方法处理工况具体对象与祖先对应对象数据共享。

结论：懂需求并不等于会需求分析，懂需求分析并不等于会分析功能需求。而系统构架设计，功能的设计这方面的能力更加需要有自己的设计思想和经验。编码相对来说只要懂开发工具和语言。要理解软件开发流程和项目管理思想，并不是那么容易，要多思考仔细推敲才能形成自己的思维和思想。才能真正运用这些知识。

问题：我们开发项目，如果有个只懂需求的人我们如何利用他，或者只懂专业.毕竟全才是很少，合理利用资源，充分发挥每个人优势。是管理好项目的前提

写得很好。作者是认真仔细地读了书，并且联系AutoPFA实际，进行了思考。作者能听取意见，反馈意见，有很强的分析归纳能力，能融会贯通，积极主动，学以致用。这种能力正是我们开发软件所需要的。ligb on 2007.02.14

以上来源于《软件开发项目管理》