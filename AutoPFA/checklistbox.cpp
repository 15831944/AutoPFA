// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "checklistbox.h"

// Dispatch interfaces referenced by this interface
#include "font.h"
#include "picture.h"

/////////////////////////////////////////////////////////////////////////////
// CCheckListBox1

IMPLEMENT_DYNCREATE(CCheckListBox1, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCheckListBox1 properties

short CCheckListBox1::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I4, propVal);
}

OLE_COLOR CCheckListBox1::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CCheckListBox1::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

COleFont CCheckListBox1::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CCheckListBox1::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_COLOR CCheckListBox1::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_HANDLE CCheckListBox1::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

CString CCheckListBox1::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

CString CCheckListBox1::Get_Text()
{
	CString result;
	GetProperty(0x0, VT_BSTR, (void*)&result);
	return result;
}

void CCheckListBox1::Set_Text(LPCTSTR propVal)
{
	SetProperty(0x0, VT_BSTR, propVal);
}

BOOL CCheckListBox1::GetSorted()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetSorted(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

short CCheckListBox1::GetNewIndex()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

BOOL CCheckListBox1::GetItemHighLight()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetItemHighLight(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

long CCheckListBox1::GetStyle()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetStyle(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

short CCheckListBox1::GetListCount()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

short CCheckListBox1::GetListIndex()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CCheckListBox1::SetListIndex(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

short CCheckListBox1::GetTopIndex()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CCheckListBox1::SetTopIndex(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

CPicture CCheckListBox1::GetCheckImage()
{
	LPDISPATCH pDispatch;
	GetProperty(0x8, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CCheckListBox1::SetCheckImage(LPDISPATCH propVal)
{
	SetProperty(0x8, VT_DISPATCH, propVal);
}

long CCheckListBox1::GetToggleMode()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetToggleMode(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

BOOL CCheckListBox1::GetShowFocusRect()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetShowFocusRect(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CCheckListBox1::GetRedraw()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetRedraw(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

BOOL CCheckListBox1::GetKeyFind()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetKeyFind(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

short CCheckListBox1::GetSelCount()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

long CCheckListBox1::GetMultiSelect()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

short CCheckListBox1::GetCheckedCount()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}

long CCheckListBox1::GetSortMode()
{
	long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetSortMode(long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

long CCheckListBox1::GetCheckAlignment()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetCheckAlignment(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

BOOL CCheckListBox1::GetNoCheckmark()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetNoCheckmark(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

BOOL CCheckListBox1::GetImageStretch()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetImageStretch(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

long CCheckListBox1::GetItemHeight()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CCheckListBox1::SetItemHeight(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

BOOL CCheckListBox1::GetWordWrap()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CCheckListBox1::SetWordWrap(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCheckListBox1 operations

void CCheckListBox1::RemoveItem(short nIndex)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nIndex);
}

void CCheckListBox1::Clear()
{
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCheckListBox1::AddCheckedItem(LPCTSTR lpstrText, const VARIANT& vIndex)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpstrText, &vIndex);
}

void CCheckListBox1::AddItem(LPCTSTR lpstrText, const VARIANT& vIndex)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpstrText, &vIndex);
}

void CCheckListBox1::AddPicItem(LPCTSTR lpstrText, LPDISPATCH pic, const VARIANT& vIndex)
{
	static BYTE parms[] =
		VTS_BSTR VTS_DISPATCH VTS_VARIANT;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpstrText, pic, &vIndex);
}

void CCheckListBox1::CheckAll()
{
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCheckListBox1::UnCheckAll()
{
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

unsigned long CCheckListBox1::GetItemBackColor(short nIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CCheckListBox1::SetItemBackColor(short nIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

unsigned long CCheckListBox1::GetItemForeColor(short nIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CCheckListBox1::SetItemForeColor(short nIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

COleFont CCheckListBox1::GetItemFont(short nIndex)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		nIndex);
	return COleFont(pDispatch);
}

void CCheckListBox1::SetItemFont(short nIndex, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

CPicture CCheckListBox1::GetItemImage(short nIndex)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		nIndex);
	return CPicture(pDispatch);
}

void CCheckListBox1::SetItemImage(short nIndex, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

CString CCheckListBox1::GetList(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CCheckListBox1::SetList(short nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

BOOL CCheckListBox1::GetValue(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CCheckListBox1::SetValue(short nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

BOOL CCheckListBox1::GetGrayed(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CCheckListBox1::SetGrayed(short nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

BOOL CCheckListBox1::GetSelected(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CCheckListBox1::SetSelected(short nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

long CCheckListBox1::GetItemData(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CCheckListBox1::SetItemData(short nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

void CCheckListBox1::SelectAll()
{
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCheckListBox1::UnselectAll()
{
	InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CCheckListBox1::FindString(LPCTSTR s, const VARIANT& startIndex)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		s, &startIndex);
	return result;
}

long CCheckListBox1::FindStringExact(LPCTSTR s, const VARIANT& startIndex)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		s, &startIndex);
	return result;
}

void CCheckListBox1::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
